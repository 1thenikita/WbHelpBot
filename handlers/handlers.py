# handlers.py
from aiogram import types, Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from buttons.keyboards import main_menu_keyboard
from database.queries import add_user, add_product, get_products, update_price, delete_product, get_product_details, \
    get_price_history, get_product_info
from services.wildberries import get_product_price, get_photo_image, get_product
from states import AddProductState
from utils.regex import extract_product_id

router = Router()


@router.message(Command('addlink'))
@router.message(AddProductState.waiting_for_product_name)
@router.message(F.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_product_command(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞

    :param message:
    :return:
    """
    try:
        text = message.text.split(maxsplit=1)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(text) == 2:
            url = text[1]
        else:
            url = text[0]

        # –ò–∑–≤–ª–µ–∫–∞–µ–º product_id –∏–∑ —Å—Å—ã–ª–∫–∏
        product_id = extract_product_id(url)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        user_id = message.from_user.id

        product = get_product(product_id)
        priceStr = get_product_price(product_id)
        price = float(priceStr)
        add_product(user_id, product.get('name', "–¢–æ–≤–∞—Ä —Å Wildberries"), product_id, price)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
        update_price(product_id)

        await state.clear()
        await message.answer("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω!")
    except IndexError:
        await state.set_state(AddProductState.waiting_for_product_name)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
    except ValueError as e:
        await message.answer(str(e))
        await state.clear()
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await state.clear()


@router.message(Command("help"))
@router.callback_query(F.data == 'help')
@router.message(F.text.lower() == "–ø–æ–º–æ—â—å")
async def help_command(message):
    if(type(message) == types.CallbackQuery):
        message = message.message

    await message.answer(
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä—ã Wildberries, –∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å, –µ—Å–ª–∏ —Ü–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å.\n"
        "–≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä —Å–æ —Å–∫–∏–¥–∫–æ–π, –∏–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ —Å–∏–ª—å–Ω–æ–≥–æ –ø–æ–¥–æ—Ä–æ–∂–∞–Ω–∏—è.\n"
        "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É - –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
    )


@router.message(Command('start'))
@router.callback_query(F.data == 'start')
@router.message(F.text.lower() == "—Å—Ç–∞—Ä—Ç")
async def start_command(message, state: FSMContext):
    """
    –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –±–æ—Ç–∞.

    :param message:
    :return:
    """
    if(type(message) == types.CallbackQuery):
        message = message.message

    await state.clear()
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        add_user(message.from_user.id, message.from_user.username)
    except:
        print('xd')

    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ Wildberries. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard()
    )


@router.message(Command('add'))
@router.callback_query(F.data == 'add')
@router.message(F.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_product_command(message: types.Message, state: FSMContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç FSM

    :param message:
    :param state:
    :return:
    """
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AddProductState.waiting_for_product_name)


@router.message(Command('process'))
@router.callback_query(F.data == 'process')
async def process_product_name(message: types.Message, state: FSMContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–æ–º.

    :param message:
    :param state:
    :return:
    """

    product_name = message.text
    user_id = message.from_user.id

    # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞
    product_id = hash(product_name) % 1000000

    add_product(user_id, product_name, product_id, 1000)
    await message.answer(
        f"–¢–æ–≤–∞—Ä '{product_name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ.",
        reply_markup=main_menu_keyboard()
    )
    await state.clear()


@router.message(Command('list'))
@router.callback_query(F.data == 'list')
@router.message(F.text.lower() == "—Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö")
async def list_products_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤.

    :param message:
    :return:
    """
    user_id = message.from_user.id
    products = get_products(user_id)

    if not products:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
    else:
        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏
        keyboard = InlineKeyboardBuilder()

        response = "–í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã:\n\n"
        for product in products:
            response += (
                f"üì¶ <b>{product.product_name}</b>\n"
                f"üî¢ ID: {product.product_id}\n"
                f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {product.price} —Ä—É–±.\n\n"
            )

            keyboard.button(
                text=f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å {product.product_name}",
                callback_data=f"view_item {product.product_id}"
            )

        await message.answer(response, reply_markup=keyboard.as_markup(), parse_mode='HTML')


@router.message(Command('view_item'))
@router.message(F.text.lower() == "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä")
async def view_item_command(message: types.Message, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

    args = message.text.split()
    if len(args) != 2:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞. –ü—Ä–∏–º–µ—Ä: /view_item 123456")
        return

    product_id = args[1]

    builder = InlineKeyboardBuilder()
    builder.button(
        text=f"–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä",
        callback_data=f"delete_item {product_id}"
    )

    await state.set_state(product_id=product_id)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
    product = get_product_info(product_id)
    if not product:
        await message.reply("–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
    price_history = get_price_history(product_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    history_text = "\n".join([f"{timestamp}: {price} —Ä—É–±." for timestamp, price in price_history])
    if not history_text:
        history_text = "–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

    message_text = (
        f"üì¶ <b>{product.product_name}</b>\n"
        f"üîó <a href='https://www.wildberries.ru/catalog/{product_id}/detail.aspx'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>\n\n"
        f"üìä <b>–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω:</b>\n{history_text}"
    )

    photoUrl = get_photo_image(product_id)

    if photoUrl is None:
        await message.reply(
            text=message_text,
            parse_mode="HTML", reply_markup=builder.as_markup()
        )

    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.reply_photo(
            photo=photoUrl,
            caption=message_text,
            parse_mode="HTML", reply_markup=builder.as_markup()
        )


@router.callback_query(lambda callback_query: callback_query.data.startswith("view_item"))
async def view_item_handler(callbackQuery: types.CallbackQuery, state: FSMContext) -> None:
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    args = callbackQuery.data.split(" ")
    if len(args) != 2:
        await callbackQuery.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞. –ü—Ä–∏–º–µ—Ä: /view_item 123456")
        return

    product_id = args[1]

    builder = InlineKeyboardBuilder()
    builder.button(
        text=f"–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä",
        callback_data=f"delete_item {product_id}"
    )

    await state.set_state(product_id=product_id)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
    product = get_product_info(product_id)
    if not product:
        await callbackQuery.message.reply("–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
    price_history = get_price_history(product_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    history_text = "\n".join([f"{timestamp}: {price} —Ä—É–±." for timestamp, price in price_history])
    if not history_text:
        history_text = "–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

    message_text = (
        f"üì¶ <b>{product.product_name}</b>\n"
        f"üîó <a href='https://www.wildberries.ru/catalog/{product_id}/detail.aspx'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>\n\n"
        f"üìä <b>–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω:</b>\n{history_text}"
    )

    photoUrl = get_photo_image(product_id)

    if photoUrl is None:
        await callbackQuery.message.reply(
            text=message_text,
            parse_mode="HTML"
        )

    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callbackQuery.message.reply_photo(
            photo=photoUrl,
            caption=message_text,
            parse_mode="HTML"
        )


@router.message(Command('remove_item'))
@router.callback_query(F.data == 'remove_item')
@router.message(F.text.lower() == "—É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def remove_item_command(message: types.Message, state: FSMContext):
    data = await state.get_state()

    args = message.text.split()
    if len(args) != 3:
        product_id_str = data['product_id']
        if (product_id_str is None):
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞. –ü—Ä–∏–º–µ—Ä: /remove_item 123456")
            return
        product_id = int(data['product_id'])

    else:
        product_id = args[2]

    # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    delete_product(message.from_user.id, product_id)

    await message.reply(f"–¢–æ–≤–∞—Ä —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º {product_id} –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")


@router.callback_query(lambda callback_query: callback_query.data.startswith("view_item"))
async def remove_item_callbackQuery(callbackQuery: types.CallbackQuery, state: FSMContext):
    data = await state.get_state()

    args = callbackQuery.data.split()
    if len(args) != 2:
        product_id_str = data['product_id']
        if (product_id_str is None):
            await callbackQuery.message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞. –ü—Ä–∏–º–µ—Ä: /remove_item 123456")
            return
        product_id = int(product_id_str)
    else:
        product_id = args[1]

    # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    delete_product(callbackQuery.from_user.id, product_id)

    await callbackQuery.message.reply(f"–¢–æ–≤–∞—Ä —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º {product_id} –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")


@router.message(Command('cancel'))
@router.message(F.text.lower() == "cancel")
async def cancel_command(message: types.Message, state: FSMContext):
    """
    –û—Ç–º–µ–Ω–∞ FSM. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await state.clear()
    await message.answer(
        text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=types.ReplyKeyboardRemove()
    )


@router.message(StateFilter(None), Command(commands=["cancel"]))
@router.message(default_state, F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cmd_cancel_no_state(message: types.Message, state: FSMContext):
    await state.set_data({})
    await message.answer(
        text="–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å",
        reply_markup=ReplyKeyboardRemove()
    )
