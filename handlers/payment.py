import os
from datetime import timedelta, datetime

from aiogram import types, Router, F
from aiogram.filters import Command, CommandObject
from aiogram.types import LabeledPrice
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import PAY_TOKEN
from database.queries import update_subscription, get_user_subscription

router = Router()
PAYMENTS_TOKEN = PAY_TOKEN


# –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@router.message(Command("buy"))
@router.callback_query(F.data == "buy")
async def buy_command(message: types.Message, command: CommandObject):
    """
    –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.

    :param message:
    :param command:
    :return:
    """

    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /donate –ß–ò–°–õ–û,
    # —Ç–æ–≥–¥–∞ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
    if command.command != "buy":
        amount = int(command.command.split("_")[1])
    # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ –∏ –Ω–∞ –µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω
        if (
                command.args is None
                or not command.args.isdigit()
                or not 1 <= int(command.args) <= 2500
        ):
            amount = 100
        else:
            amount = int(command.args)

    PRICE = LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü", amount=amount * 100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ä—É–±)

    builder = InlineKeyboardBuilder()
    builder.button(
        text=f"–û–ø–ª–∞—Ç–∏—Ç—å {amount} —Ä—É–±–ª–µ–π",
        pay=True
    )
    builder.button(
        text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É",
        callback_data="cancel"
    )
    builder.adjust(1)

    await message.reply_invoice(
        title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
        description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞ –Ω–∞ 1 –º–µ—Å—è—Ü\n–ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ",
        provider_token=PAYMENTS_TOKEN,
        currency="rub",
        # TODO —Ñ–æ—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å
        photo_url="https://static35.tgcnt.ru/posts/_0/a4/a4efcb9d0c3c4febd65362e692cd57fb.jpg",
        photo_width=640,
        photo_height=640,
        # photo_size=416,
        is_flexible=False,
        prices=[PRICE],
        start_parameter="one-month-subscription",
        payload="test-invoice-payload",
        reply_markup=builder.as_markup())


@router.pre_checkout_query()
async def on_pre_checkout_query(
        pre_checkout_query: types.PreCheckoutQuery,
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥ –æ–ø–ª–∞—Ç—ã - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã

    :param pre_checkout_query:
    :return:
    """
    await pre_checkout_query.answer(ok=True)

@router.message(F.successful_payment)
async def on_successful_payment(
        callbackQuery: types.CallbackQuery
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã.

    :param callbackQuery: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :return:
    """
    builder = InlineKeyboardBuilder()
    builder.button(
        text=f"üìä–í —Ç–æ–≤–∞—Ä—ã",
        callback_data="list"
    )
    builder.button(
        text="üè†–í –Ω–∞—á–∞–ª–æ",
        callback_data="start"
    )
    builder.adjust(1)

    try:
        telegram_id = callbackQuery.from_user.id
        now = datetime.now()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        user_subscription = get_user_subscription(telegram_id)

        if not user_subscription:
            await callbackQuery.message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        subscription_status, subscription_expiry = user_subscription

        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –∏–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        if subscription_status == 'active' and subscription_expiry:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
            expiry_date = datetime.strptime(subscription_expiry, '%Y-%m-%d %H:%M:%S') + timedelta(days=30)
        else:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
            expiry_date = now + timedelta(days=30)

        update_subscription(telegram_id, 'active', expiry_date)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callbackQuery.message.reply(
            f"üéâ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–ø–ª–∞—Ç—É!\n\nüîë –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {expiry_date.strftime('%Y-%m-%d %H:%M:%S')}.\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!",
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        await callbackQuery.message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
